/*
    reverse
        把数组倒过来排列
        @params(参数)
            没有参数
        @return(返回值)
            排列后的新数组，原来数组改变
*/
// let ary = [12, 15, 9, 28, 10, 22];
// ary.reverse();
// console.log(ary);   // [22, 10, 28, 9, 15, 12]



// #################################################################
/*
    sort
        实现数组的排序
        @params(参数)
            可以没有，也可以是个函数
        @return(返回值)
            排列后的新数组，原来数组改变
*/
// let ary = [7, 8, 2, 4, 6, 9];
// ary.sort();
// console.log(ary);   // [2, 4, 6, 7, 8, 9]

// sort方法中如果不传递参数，是无法处理10以上数字排序的（它默认按照每一项第一个字符来排，不是我们想要的效果）
// ary = [12, 15, 9, 28, 10, 22];
// ary.sort();
// console.log(ary);   // [10, 12, 15, 22, 28, 9]

// 想要实现多位数正常排序，需要给sort传递一个函数，函数中返回 a-b 实现升序，返回 b-a 实现降序（为什么？需要先了解冒泡排序的机制，后续讲）
// ary = [12, 15, 9, 28, 10, 22];
// ary.sort(function(a,b){ return : a-b; });
// ary.sort((a, b) => {
//     // a和b是相邻的两项
//     // console.log(a, b);
//     // 有小到大 a-b；有大到小 b-a
//     return a - b;
// });
// ary.sort((a, b) => a -b);
// console.log(ary);   // [9, 10, 12, 15, 22, 28]



// #################################################################
/*
    forEach
        遍历数组中的每一项内容
        @params(参数)
            回调函数
        @return(返回值)
            原来数组不变
*/
// let ary = [7, 8, 2, 4, 6, 9];

// 基于原生JS中的循环可以实现
// for (let i = 0; i < ary.length; i++) {
//     // i: 当前循环这一项的索引
//     // ary[i]: 根据索引获取循环的这一项
//     console.log('索引: ' + i + '内容: ' + ary[i]);
// }

// function () {}  ===>  () => {}
// ary.forEach((item, index) => {
//     // 数组中有多少项，函数就会被默认执行多少次
//     // 每一次执行函数: item是数组中当前要操作的这一项，index是当前的索引
//     console.log('索引: ' + index + '内容: ' + item);
// });













